{
	"info": {
		"_postman_id": "a5a164b5-77b1-4608-bab0-143d2cf401ac",
		"name": "Practice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32325704"
	},
	"item": [
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.bookingid)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"//console.log(firstName)\r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"//console.log(lastName)\r",
							"pm.environment.set(\"lastName\", lastName)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"totalPrice\", totalprice)\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid\", depositPaid)\r",
							"\r",
							"//Date formating\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"//console.log(today.add(5,'d').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.subtract(5,'d').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"let number = Math.random()*10;\r",
							"var checkin = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkin)\r",
							"pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							"var checkout = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkout)\r",
							"pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"\r",
							"var AdditionalNeeds = pm.variables.replaceIn(\"{{$randomLoremWord}}\")\r",
							"pm.environment.set(\"AdditionalNeeds\", AdditionalNeeds)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : \"{{totalPrice}}\",\r\n\t\"depositpaid\" : \"{{depositPaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{AdditionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"//console.log(statusCode)\r",
							"switch(statusCode){\r",
							"\r",
							"    case 200:\r",
							"            var jsonData = pm.response.json()\r",
							"\r",
							"            pm.test(\"Status Code 200\", function () {\r",
							"                pm.response.to.have.status(200);\r",
							"            });\r",
							"\r",
							"            pm.test(\"First Name Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Last Name Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Total price Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"totalPrice\")).to.eql(jsonData.totalprice.toString())\r",
							"            })\r",
							"\r",
							"            pm.test(\"Deposit Paid Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"depositPaid\")).to.eql(jsonData.depositpaid.toString())\r",
							"            })\r",
							"\r",
							"            pm.test(\"Checkin Date Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Checkout Date Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"checkout\")).to.eql(jsonData.bookingdates.checkout)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Additional Needs Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds)\r",
							"            })\r",
							"        break;\r",
							"    \r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\")\r",
							"        break;\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data1 = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\", data1.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"//console.log(firstName)\r",
							"pm.environment.set(\"firstName\", firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"//console.log(lastName)\r",
							"pm.environment.set(\"lastName\", lastName)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"totalPrice\", totalprice)\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid\", depositPaid)\r",
							"\r",
							"//Date formating\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"//console.log(today.add(5,'d').format(\"YYYY-MM-DD\"))\r",
							"//console.log(today.subtract(5,'d').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"let number = Math.random()*10;\r",
							"var checkin = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkin)\r",
							"pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							"var checkout = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"//console.log(checkout)\r",
							"pm.environment.set(\"checkout\",checkout)\r",
							"\r",
							"\r",
							"var AdditionalNeeds = pm.variables.replaceIn(\"{{$randomLoremWord}}\")\r",
							"pm.environment.set(\"AdditionalNeeds\", AdditionalNeeds)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"\r",
							"if(code==401 || code==403){\r",
							"    pm.test(\"Unauthorized!! Generate a token for authentication\")\r",
							"}\r",
							"else if(code==200){\r",
							"    pm.test(\"Updated\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : \"{{totalPrice}}\",\r\n\t\"depositpaid\" : \"{{depositPaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{AdditionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"//console.log(statusCode)\r",
							"switch(statusCode){\r",
							"\r",
							"    case 200:\r",
							"            var jsonData = pm.response.json()\r",
							"\r",
							"            pm.test(\"Status Code 200\", function () {\r",
							"                pm.response.to.have.status(200);\r",
							"            });\r",
							"\r",
							"            pm.test(\"First Name Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Last Name Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Total price Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"totalPrice\")).to.eql(jsonData.totalprice.toString())\r",
							"            })\r",
							"\r",
							"            pm.test(\"Deposit Paid Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"depositPaid\")).to.eql(jsonData.depositpaid.toString())\r",
							"            })\r",
							"\r",
							"            pm.test(\"Checkin Date Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Checkout Date Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"checkout\")).to.eql(jsonData.bookingdates.checkout)\r",
							"            })\r",
							"\r",
							"            pm.test(\"Additional Needs Validation\", function(){\r",
							"                pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds)\r",
							"            })\r",
							"        break;\r",
							"    \r",
							"    case 404:\r",
							"        pm.test(\"Not Found\")\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\")\r",
							"        break;\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*pm.test(\"404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});*/\r",
							"var code = pm.response.code\r",
							"\r",
							"if(code==401 || code==403){\r",
							"    pm.test(\"Unauthorized!! Generate a token for authentication\")\r",
							"}\r",
							"else if(code==404){\r",
							"    pm.test(\"Data deleted successfully!\")\r",
							"}\r",
							"else if(code==200){\r",
							"    pm.test(\"Data is not deleted yet!\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}